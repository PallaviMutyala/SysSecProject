This project is on the Android System to limit the privileges given to third party applications on the user protected data despite the permissions in the manifest file. This helps in protecting the user-sensitive data from being shared across the device. Design of Android is such that it gives lesser control on applications to the user. During the installation of applications, Android reads the Manifest file of the application to display which services and data does the application use. For example, an application may request access to location information (such as captured by the GPS sensor) and try to access Internet. If the user chooses not to allow access, then he can cancel the installation but there is no way to control the access of data at runtime.  Application with over-privileges can end up becoming malicious by accessing system resources in unintended workflows. 
We used TaintDroid which is an extension to the existing Android Architecture which tracks flow of data through 3rd party application. All the third-party applications are considered untrusted and are monitored to see if they access any user sensitive data. TaintDroid automatically labels data from privacy sensitive sources and transitively copies the taint as data propagates through applications. When tainted data is transmitted over the network, Taintdroid logs the message with application responsible for transmitting the data and the tainted data. TaintDroid Notifier is a user level application that picks these log messages and display it to user as notifications. This way, user gets a greater insight into what applications are accessing and transferring which data out of local device. Thus user can identify misbehaving applications.   The flaw that we see in the above model is that, though user is notified about the unintended workflow, he can't control the data flow. He just gets the fair knowledge of how a malicious application is harming him. 
Our Project aims to address this issue by letting the sensitive data move out of the system only on user consent; not otherwise.  All the sink points at which data leaves the system are identified and instead of logging the messages, we check if there is any existing policy which conforms this action and throw an exception otherwise, to the application.

Link to my project code:
https://github.com/PallaviMutyala/SysSecProject
